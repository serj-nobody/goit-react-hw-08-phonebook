{"version":3,"file":"static/js/721.8471465a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"inputGroup\":\"ContactForm_inputGroup__DXBcm\",\"label\":\"ContactForm_label__-cVXI\"};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"redux/Contacts/contacts-operations\";\n\nimport css from \"./ContactForm.module.css\"\n\n\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputID = nanoid();\n  const numberInputID = nanoid();\n\n  const dispatch = useDispatch();\n\n  const onInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    };\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const contact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={onSubmit}>\n      <div className={css.inputGroup}>\n        <label className={css.label} htmlFor={nameInputID}>Name:</label>\n        <input\n          id={nameInputID}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={onInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div className={css.inputGroup}>\n        <label className={css.label} htmlFor={numberInputID}>Number:</label>\n        <input\n          id={numberInputID}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={onInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      \n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"Filter_filterContainer__8G57N\",\"label\":\"Filter_label__vEd1E\"};","import { nanoid } from \"nanoid\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterContacts } from \"redux/Filter/filter-slice\";\n\nimport css from \"./Filter.module.css\"\n\n\n\nconst filterInputID = nanoid();\n\nexport const Filter = () => {\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  const onFilterContacts = ({target}) => {\n    const action = filterContacts(target.value);\n    dispatch(action);\n  }\n\n  return (\n    <div className={css.filterContainer}>\n      <label className={css.label} htmlFor={filterInputID}>Find contact by name:</label>\n      <input\n        id={filterInputID}\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        onChange={onFilterContacts}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__gxreB\",\"contactWrapper\":\"ContactItem_contactWrapper__KzoxG\",\"name\":\"ContactItem_name__XjpNK\"};","import { useDispatch } from \"react-redux\";\nimport { removeContact } from \"redux/Contacts/contacts-operations\";\n\nimport css from \"./ContactItem.module.css\"\n\nimport PropTypes from 'prop-types';\n\n\n\nexport const ContactItem = ({contact}) => {\n  const dispatch = useDispatch();\n\n  const onRemoveContact = (id) => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <li className={css.item}>\n      <div className={css.contactWrapper}>\n        <span className={css.name}>{contact.name}</span>\n        <span>{contact.number}</span>\n      </div>\n      <button type=\"button\" onClick={() => onRemoveContact(contact.id)}>Delete</button>\n    </li>\n  );\n}\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n}","import { useEffect } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/Contacts/contacts-operations\";\n\nimport { ContactItem } from \"components/ContactItem/ContactItem\";\n\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilterResults = () => {\n  const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  }\n\n  const filterResults = getFilterResults();\n\n  return (\n    <ul>\n      {filterResults.map(contact => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"pageWrapper\":\"ContactsPage_pageWrapper__NS9ob\",\"pageTitle\":\"ContactsPage_pageTitle__Y000j\",\"secodaryTitle\":\"ContactsPage_secodaryTitle__rnaWD\"};","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\nimport css from \"./ContactsPage.module.css\"\n\nconst ContactsPage = () => {\n  return (\n    <div className={css.pageWrapper}>\n      <h3 className={css.pageTitle}>My Contact Book</h3>\n      <ContactForm />\n      <h4 className={css.secodaryTitle}>Contacts</h4>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","useState","name","setName","number","setNumber","nameInputID","nanoid","numberInputID","dispatch","useDispatch","onInputChange","event","currentTarget","value","className","css","onSubmit","preventDefault","contact","id","addContact","htmlFor","type","onChange","pattern","title","required","filterInputID","Filter","filter","useSelector","state","target","action","filterContacts","ContactItem","onClick","removeContact","ContactList","contacts","items","useEffect","fetchContacts","filterResults","normalizedFilter","toLowerCase","includes","getFilterResults","map","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}