{"version":3,"file":"static/js/845.058218cb.chunk.js","mappings":"sQACA,EAAuB,uBAAvB,EAA2D,6BAA3D,EAAgG,wB,SCQnFA,EAAW,WACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAElBG,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,SAACC,GACrB,MAAwBA,EAAMC,cAAtBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MAEd,OAAQf,GACN,IAAK,OACHC,EAAQc,GACR,MACF,IAAK,QACHZ,EAASY,GACT,MACF,IAAK,WACHV,EAAYU,GACZ,MACF,QACE,SAuBN,OACE,kBAAMC,UAAWC,EAAUC,SAdZ,SAACL,GAChBA,EAAMM,iBAEN,IAAMC,EAAO,CACXpB,KAAMA,EACNE,MAAOA,EACPE,SAAUA,GAGZM,GAASW,EAAAA,EAAAA,IAAWD,IAdpBnB,EAAQ,IACRE,EAAS,IACTE,EAAY,KAiBZ,WACE,iBAAKW,UAAWC,EAAhB,WACE,kBAAOD,UAAWC,EAAWK,QAAShB,EAAtC,oBACA,kBACEiB,GAAIjB,EACJkB,KAAK,OACLxB,KAAK,OACLe,MAAOf,EACPyB,SAAUb,EACVc,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,iBAAKZ,UAAWC,EAAhB,WACE,kBAAOD,UAAWC,EAAWK,QAASd,EAAtC,qBACA,kBACEe,GAAIf,EACJgB,KAAK,QACLxB,KAAK,QACLe,MAAOb,EACPuB,SAAUb,EACVgB,UAAQ,QAGZ,iBAAKZ,UAAWC,EAAhB,WACE,kBAAOD,UAAWC,EAAWK,QAASb,EAAtC,wBACA,kBACEc,GAAId,EACJe,KAAK,WACLxB,KAAK,WACLe,MAAOX,EACPqB,SAAUb,EACVgB,UAAQ,QAGZ,gBAAKZ,UAAWC,EAAhB,UACE,mBAAQO,KAAK,SAAb,4BC9FR,EAA8B,8BAA9B,EAAwE,4BCyBxE,EAjBiB,WACf,OAA4BK,EAAAA,EAAAA,IAAYC,EAAAA,IAAhCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAGhB,OAFgBC,EAAAA,EAAAA,MAGP,SAAC,KAAD,CAAUC,GAAG,eAIpB,iBAAKlB,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,gCACA,SAACnB,EAAD,IACCiC,GAAUI,MAAM,QAAD,OAASH,EAAT,6B,sDCpBf,IAkBIzB,EAAS,eAAC6B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACjB,EAAIkB,GAWvD,OARElB,IAFFkB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["webpack://react-homework-template/./src/components/AuthForm/AuthForm.module.css?9658","components/AuthForm/AuthForm.jsx","webpack://react-homework-template/./src/pages/AuthPage/AuthPage.module.css?5b0f","pages/AuthPage/AuthPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthForm_form__N+Fyz\",\"inputGroup\":\"AuthForm_inputGroup__HLlui\",\"label\":\"AuthForm_label__-RWhN\"};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { signupUser } from \"redux/Auth/auth-operations\";\n\nimport css from \"./AuthForm.module.css\"\n\n\n\nexport const AuthForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const nameInputID = nanoid();\n  const emailInputID = nanoid();\n  const passwordInputID = nanoid();\n\n  const dispatch = useDispatch();\n\n  const onInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    };\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const user = {\n      name: name,\n      email: email,\n      password: password,\n    };\n\n    dispatch(signupUser(user));\n    reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={onSubmit}>\n      <div className={css.inputGroup}>\n        <label className={css.label} htmlFor={nameInputID}>Name:</label>\n        <input\n          id={nameInputID}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={onInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div className={css.inputGroup}>\n        <label className={css.label} htmlFor={emailInputID}>Email:</label>\n        <input\n          id={emailInputID}\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={onInputChange}\n          required\n        />\n      </div>\n      <div className={css.inputGroup}>\n        <label className={css.label} htmlFor={passwordInputID}>Password:</label>\n        <input\n          id={passwordInputID}\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={onInputChange}\n          required\n        />\n      </div>\n      <div className={css.inputGroup}>\n        <button type=\"submit\">Register</button>\n      </div>\n    </form>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"pageWrapper\":\"AuthPage_pageWrapper__CqwmX\",\"pageTitle\":\"AuthPage_pageTitle__WltX2\"};","import { useSelector } from \"react-redux\";\nimport { getAuthError} from \"redux/Auth/auth-selectors\";\nimport { Navigate } from \"react-router-dom\";\nimport useAuth from \"shared/hooks/useAuth\";\n\nimport { AuthForm } from \"components/AuthForm/AuthForm\";\n\nimport css from \"./AuthPage.module.css\"\n\nconst AuthPage = () => {\n  const { status, message } = useSelector(getAuthError);\n  const isLogin = useAuth();\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />\n  };\n\n  return (\n    <div className={css.pageWrapper}>\n      <h3 className={css.pageTitle}>Registration Form</h3>\n      <AuthForm />\n      {status && alert(`User ${message} is already in use!`)}\n    </div>\n  );\n};\n\nexport default AuthPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["AuthForm","useState","name","setName","email","setEmail","password","setPassword","nameInputID","nanoid","emailInputID","passwordInputID","dispatch","useDispatch","onInputChange","event","currentTarget","value","className","css","onSubmit","preventDefault","user","signupUser","htmlFor","id","type","onChange","pattern","title","required","useSelector","getAuthError","status","message","useAuth","to","alert","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}