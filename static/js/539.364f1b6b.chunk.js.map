{"version":3,"file":"static/js/539.364f1b6b.chunk.js","mappings":"qQACA,EAAuB,wBAAvB,EAA4D,8BAA5D,EAAkG,yB,SCQrFA,EAAY,WACvB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAElBE,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,SAACC,GACrB,MAAwBA,EAAMC,cAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,QACHX,EAASY,GACT,MACF,IAAK,WACHV,EAAYU,GACZ,MACF,QACE,SAqBN,OACE,kBAAMC,UAAWC,EAAUC,SAbZ,SAACN,GAChBA,EAAMO,iBAEN,IAAMC,EAAO,CACXlB,MAAOA,EACPE,SAAUA,GAGZK,GAASY,EAAAA,EAAAA,IAAUD,IAZnBjB,EAAS,IACTE,EAAY,KAgBZ,WACE,iBAAKW,UAAWC,EAAhB,WACE,kBAAOD,UAAWC,EAAWK,QAAShB,EAAtC,qBACA,kBACEiB,GAAIjB,EACJkB,KAAK,QACLV,KAAK,QACLC,MAAOb,EACPuB,SAAUd,EACVe,UAAQ,QAGZ,iBAAKV,UAAWC,EAAhB,WACE,kBAAOD,UAAWC,EAAWK,QAASd,EAAtC,wBACA,kBACEe,GAAIf,EACJgB,KAAK,WACLV,KAAK,WACLC,MAAOX,EACPqB,SAAUd,EACVe,UAAQ,QAGZ,gBAAKV,UAAWC,EAAhB,UACE,mBAAQO,KAAK,SAAb,yBC1ER,EAA8B,+BAA9B,EAAyE,6BCyBzE,EAjBkB,WAChB,IAAQG,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAAvBF,OAGR,OAFgBG,EAAAA,EAAAA,MAGP,SAAC,KAAD,CAAUC,GAAG,eAIpB,iBAAKf,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,yBACA,SAACjB,EAAD,IACC2B,GAAUK,MAAM,qD,sDCpBhB,IAkBIzB,EAAS,eAAC0B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACd,EAAIe,GAWvD,OAREf,IAFFe,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"inputGroup\":\"LoginForm_inputGroup__PH6J+\",\"label\":\"LoginForm_label__F7sLE\"};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { loginUser } from \"redux/Auth/auth-operations\";\n\nimport css from \"./LoginForm.module.css\"\n\n\n\nexport const LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const emailInputID = nanoid();\n  const passwordInputID = nanoid();\n\n  const dispatch = useDispatch();\n\n  const onInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    \n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    };\n  };\n\n  const reset = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const user = {\n      email: email,\n      password: password,\n    };\n\n    dispatch(loginUser(user));\n    reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={onSubmit}>\n      <div className={css.inputGroup}>\n        <label className={css.label} htmlFor={emailInputID}>Email:</label>\n        <input\n          id={emailInputID}\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={onInputChange}\n          required\n        />\n      </div>\n      <div className={css.inputGroup}>\n        <label className={css.label} htmlFor={passwordInputID}>Password:</label>\n        <input\n          id={passwordInputID}\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={onInputChange}\n          required\n        />\n      </div>\n      <div className={css.inputGroup}>\n        <button type=\"submit\">Login</button>\n      </div>\n    </form>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"pageWrapper\":\"LoginPage_pageWrapper__Gg3CJ\",\"pageTitle\":\"LoginPage_pageTitle__aRL4N\"};","import { useSelector } from \"react-redux\";\nimport { getAuthError } from \"redux/Auth/auth-selectors\";\nimport { Navigate } from \"react-router-dom\";\nimport useAuth from \"shared/hooks/useAuth\";\n\nimport { LoginForm } from \"components/LoginForm/LoginForm\";\n\nimport css from \"./LoginPage.module.css\"\n\nconst LoginPage = () => {\n  const { status } = useSelector(getAuthError);\n  const isLogin = useAuth();\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />\n  };\n\n  return (\n    <div className={css.pageWrapper}>\n      <h3 className={css.pageTitle}>Login Page</h3>\n      <LoginForm />\n      {status && alert(`Invalid email or password! Please Try Again.`)}\n    </div>\n  );\n};\n\nexport default LoginPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LoginForm","useState","email","setEmail","password","setPassword","emailInputID","nanoid","passwordInputID","dispatch","useDispatch","onInputChange","event","currentTarget","name","value","className","css","onSubmit","preventDefault","user","loginUser","htmlFor","id","type","onChange","required","status","useSelector","getAuthError","useAuth","to","alert","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}