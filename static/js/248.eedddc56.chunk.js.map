{"version":3,"file":"static/js/248.eedddc56.chunk.js","mappings":"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","sources":["redux/Contacts/contacts-selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getContacts = ({ contacts }) => contacts.items;","// extracted by mini-css-extract-plugin\nexport default {\"snackbar\":\"ContactForm_snackbar__ET4hJ\"};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts } from \"redux/Contacts/contacts-selectors\";\nimport { addContact } from \"redux/Contacts/contacts-operations\";\n\nimport { styled, Box, TextField, Button, Snackbar, Alert } from \"@mui/material\";\nimport css from \"./ContactForm.module.css\"\n\n\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [currentName, setCurrentName] = useState('');\n  const [openWarning, setOpenWarning] = useState(false);\n  const [openSuccess, setOpenSuccess] = useState(false);\n\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const onInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    \n    switch (name) {\n      case 'name':\n        setName(value);\n        setCurrentName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    };\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const duplicateName = (name) => {\n    const normalizedName = name.toLowerCase();\n    const result = contacts.find(contact => normalizedName === contact.name.toLowerCase());\n\n    return result;\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const contact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    if (duplicateName(name)) {\n      setOpenWarning(true);\n      reset();\n      return;\n    } else {\n      dispatch(addContact(contact));\n      setOpenSuccess(true);\n      reset();\n    }\n  };\n\n  return (\n    <StyledForm component='form' onSubmit={onSubmit} autoComplete='on'>\n      <InputWrapper>\n        <StyledInput\n          id=\"outlined-required\"\n          label=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={onInputChange}\n          size=\"small\"\n          required\n        />\n        <StyledInput\n          id=\"outlined-required\"\n          label=\"Number\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={onInputChange}\n          size=\"small\"\n          required\n        />\n      </InputWrapper>\n      <Button type=\"submit\" variant=\"contained\" color='warning'>Add Contact</Button>\n      <Snackbar className={css.snackbar} open={openWarning} autoHideDuration={3000} onClose={() => setOpenWarning(false)} anchorOrigin={{vertical: 'top', horizontal: 'center'}}>\n        <Alert severity=\"error\">{currentName} is already in your phonebook.</Alert>\n      </Snackbar>\n      <Snackbar className={css.snackbar} open={openSuccess} autoHideDuration={3000} onClose={() => setOpenSuccess(false)} anchorOrigin={{vertical: 'top', horizontal: 'center'}}>\n        <Alert severity=\"success\">{currentName} successfuly added to your phonebook!.</Alert>\n      </Snackbar>\n    </StyledForm>\n  );\n}\n\n\n\n// MUI Styles:\n\nconst StyledForm = styled(Box)({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: 'center',\n  padding: '25px 0',\n});\n\nconst InputWrapper = styled(Box)({\n  display: \"flex\",\n  flexDirection: \"column\",\n});\n\nconst StyledInput = styled(TextField)({\n  marginBottom: \"25px\",\n});","import { useSelector, useDispatch } from \"react-redux\";\nimport { filterContacts } from \"redux/Filter/filter-slice\";\n\nimport { styled, TextField } from \"@mui/material\";\n// import css from \"./Filter.module.css\"\n\n\n\nexport const Filter = () => {\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  const onFilterContacts = ({target}) => {\n    const action = filterContacts(target.value);\n    dispatch(action);\n  }\n\n  return (\n    <div style={{display: 'flex', justifyContent: 'center', width: '100%', padding: '10px 0', marginBottom: '25px', backgroundColor: '#f5f5f5',}}>\n      <StyledInput\n        id=\"outlined\"\n        label=\"Search\"\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        onChange={onFilterContacts}\n        size=\"small\"\n      />\n    </div>\n  );\n}\n\nconst StyledInput = styled(TextField)({\n  backgroundColor: \"#fff\",\n});","import { useDispatch } from \"react-redux\";\nimport { removeContact } from \"redux/Contacts/contacts-operations\";\n\nimport { styled, Paper, ListItem, ListItemText, IconButton } from \"@mui/material\";\nimport { Delete } from \"@mui/icons-material\";\n// import css from \"./ContactItem.module.css\"\n\nimport PropTypes from 'prop-types';\n\n\n\nexport const ContactItem = ({contact}) => {\n  const dispatch = useDispatch();\n\n  const onRemoveContact = (id) => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <StyledListItem>\n      <StyledCard elevation={3}>\n        <ListItemText primary={contact.name} secondary={contact.number} />\n        <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => onRemoveContact(contact.id)}>\n          <Delete sx={{ color: '#ef5350' }} />\n        </IconButton>\n      </StyledCard>\n    </StyledListItem>\n  );\n}\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\n\n// MUI Styles:\n\nconst StyledListItem = styled(ListItem)({\n  width: '100%',\n  maxWidth: '380px',\n});\n\nconst StyledCard = styled(Paper)({\n  display: 'flex',\n  padding: '10px 25px',\n  width: '100%',\n  backgroundColor: '#f5f5f5',\n});","import { useEffect } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/Contacts/contacts-operations\";\n\nimport { ContactItem } from \"components/ContactItem/ContactItem\";\n\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilterResults = () => {\n  const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  }\n\n  const filterResults = getFilterResults();\n\n  return (\n    <ul style={{display: 'flex', flexDirection: 'column', alignItems: 'center', width: '100%'}}>\n      {filterResults.map(contact => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n}","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\nimport { Box, Typography } from \"@mui/material\";\n// import css from \"./ContactsPage.module.css\"\n\nconst ContactsPage = () => {\n  return (\n    <Box sx={{ paddingTop: { xs: '88px', sm: '96px'}, width: '100%', textAlign: 'center'}}>\n      <Typography variant=\"h5\">My PhoneBook</Typography>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Box>\n  );\n};\n\nexport default ContactsPage;"],"names":["getContacts","contacts","items","ContactForm","useState","name","setName","number","setNumber","currentName","setCurrentName","openWarning","setOpenWarning","openSuccess","setOpenSuccess","useSelector","dispatch","useDispatch","onInputChange","event","currentTarget","value","reset","StyledForm","component","onSubmit","preventDefault","contact","id","nanoid","normalizedName","toLowerCase","find","duplicateName","addContact","autoComplete","InputWrapper","StyledInput","label","type","onChange","size","required","Button","variant","color","Snackbar","className","css","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","styled","Box","display","flexDirection","alignItems","padding","TextField","marginBottom","Filter","filter","state","style","justifyContent","width","backgroundColor","target","action","filterContacts","ContactItem","StyledListItem","StyledCard","elevation","ListItemText","primary","secondary","IconButton","edge","onClick","removeContact","Delete","sx","ListItem","maxWidth","Paper","ContactList","useEffect","fetchContacts","filterResults","normalizedFilter","includes","getFilterResults","map","paddingTop","xs","sm","textAlign","Typography"],"sourceRoot":""}